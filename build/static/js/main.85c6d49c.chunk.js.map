{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","searchField","handleSearchFieldChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","person","deletePerson","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchField","alertMessage","setAlertMessage","alertType","setAlertType","useEffect","personService","initialPersons","peopleToShow","length","filter","toUpperCase","includes","event","target","preventDefault","setTimeout","existingPerson","find","window","confirm","updatedPerson","returnedPerson","map","p","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85c6d49c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ searchField, handleSearchFieldChange }) => {\n  return (\n    <div>\n      filter shown with\n      <input\n        value={searchField}\n        onChange={handleSearchFieldChange}\n      />\n    </div>\n  )\n};\n\nexport default Filter","import React from 'react';\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name:\n        <input\n          value={newName}\n          onChange={handleNameChange}\n        />\n      </div>\n      <div>\n        number:\n        <input\n          value={newNumber}\n          onChange={handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n};\n\nexport default PersonForm;","import React from 'react';\n\nconst Persons = ({ person, deletePerson }) => {\n  return (\n    <div>\n      {person.name} {person.number} {' '}\n      <button onClick={deletePerson}>delete</button>\n    </div>\n  )\n};\n\nexport default Persons;","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst deletePerson = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\nexport default { getAll, create, deletePerson, update };","import React from 'react';\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n};\n\nexport default Notification;","import React, { useEffect, useState } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ searchField, setSearchField ] = useState('');\n  const [ alertMessage, setAlertMessage ] = useState(null);\n  const [ alertType, setAlertType ] = useState('');\n\n  // Set initial state using data fetched from server using axios\n  // Complete fetching with an Effect hook\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      });\n  }, []);\n\n  const addPerson = (event) => {\n    // Prevent page reload\n    event.preventDefault();\n\n    // Prevent user from adding empty values\n    if (!newName || newName.length === 0 || !newNumber || newNumber.length === 0) {\n      // Show error notification\n      setAlertMessage(\"Please enter a name and number\");\n      setAlertType('error');\n      setTimeout(() => {\n        setAlertMessage(null)\n      }, 5000);\n      return;\n    }\n\n    const existingPerson = persons.find(person => person.name === newName);\n    \n    // If person is already in phonebook, update number\n    if (existingPerson) {\n      const shouldUpdateNumber = window.confirm(\n        `${newName} is already added to phonebook, ` +\n        `replace the the old number with a new one?`\n      );\n      \n      if (shouldUpdateNumber) {\n        const id = existingPerson.id;\n\n        // Create new person object with new number and copy other existing data\n        const updatedPerson = { ...existingPerson, number: newNumber };\n\n        // Update person in backend server\n        personService\n          .update(id, updatedPerson)\n          .then(returnedPerson => {\n            // Update state to reflect updated person's information\n            setPersons(persons.map(p => p.id !== id ? p : returnedPerson));\n            // Clear input fields\n            setNewName('');\n            setNewNumber('');\n            // Show success notification\n            setAlertMessage(\n              `Updated ${returnedPerson.name}`\n            );\n            setAlertType('success');\n            setTimeout(() => {\n              setAlertMessage(null)\n            }, 5000);\n          })\n          .catch(error => {\n            // Show error notification\n            setAlertMessage(\n              `Information of '${existingPerson.name}' has already been removed from server`\n            );\n            setAlertType('error');\n            setTimeout(() => {\n              setAlertMessage(null)\n            }, 5000);\n            // Remove person from state and update UI\n            setPersons(persons.filter(p => p.id !== id));\n            // Clear input fields\n            setNewName('');\n            setNewNumber('');\n          })\n      }\n\n      return;\n    }\n\n    // Create new person\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    // Add person to backend server\n    personService\n      .create(personObject)\n      .then(returnedPerson => {\n        // Add person to persons list without mutating list\n        setPersons(persons.concat(returnedPerson));\n        // Clear input fields\n        setNewName('');\n        setNewNumber('');\n        // Show success notification\n        setAlertMessage(\n          `Added ${returnedPerson.name}`\n        );\n        setAlertType('success');\n        setTimeout(() => {\n          setAlertMessage(null)\n        }, 5000);\n      });\n  };\n\n  const deletePerson = (id) => {\n    const person = persons.find(p => p.id === id);\n    const shouldDeletePerson = window.confirm(`Delete ${person.name} ?`);\n\n    if (shouldDeletePerson) {\n      // Delete person from backend server\n      personService\n        .deletePerson(id)\n        .then(returnedPerson => {\n          // Remove person from state and update UI\n          setPersons(persons.filter(p => p.id !== id));\n        })\n        .catch(error => {\n          // Show error notification\n          setAlertMessage(\n            `The person '${person.name}' was already deleted from server`\n          );\n          setAlertType('error');\n          setTimeout(() => {\n            setAlertMessage(null)\n          }, 5000);\n          // Remove person from state and update UI\n          setPersons(persons.filter(p => p.id !== id));\n        })\n    }\n  };\n\n  const handleNameChange = (event) => {\n    // Update field value when typing in field\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    // Update field value when typing in field\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchFieldChange = (event) => {\n    // Update field value when typing in field\n    setSearchField(event.target.value);\n  };\n\n  // If text present in search field,\n  // Use text to filter names (case-insensitive)\n  // Else if no text present, show all people\n  const peopleToShow = (searchField.length > 0)\n    ? persons.filter(person => person.name.toUpperCase()\n      .includes(searchField.toUpperCase()))\n    : persons;\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification\n        message={alertMessage}\n        type={alertType}\n      />\n\n      <Filter\n        searchField={searchField}\n        handleSearchFieldChange={handleSearchFieldChange}\n      />\n      \n      <h3>Add a new person</h3>\n\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Numbers</h3>\n\n      <div>\n        {peopleToShow.map(person =>\n          <Persons\n            key={person.id}\n            person={person}\n            deletePerson={() => deletePerson(person.id)}\n          />\n        )}\n      </div>\n    </div>\n  )\n};\n\nexport default App;","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}